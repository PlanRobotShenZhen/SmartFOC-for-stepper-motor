<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\PL_SM_DRIVER.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\PL_SM_DRIVER.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat Aug 16 14:21:27 2025
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_LP_CAN1_RX0_IRQHandler &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">NMI_Handler</a><BR>
 <LI><a href="#[22]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">HardFault_Handler</a><BR>
 <LI><a href="#[23]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">MemManage_Handler</a><BR>
 <LI><a href="#[24]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BusFault_Handler</a><BR>
 <LI><a href="#[25]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">UsageFault_Handler</a><BR>
 <LI><a href="#[26]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">SVC_Handler</a><BR>
 <LI><a href="#[27]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">DebugMon_Handler</a><BR>
 <LI><a href="#[28]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">PendSV_Handler</a><BR>
 <LI><a href="#[59]">ADC3_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">ADC3_4_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3c]">ADC1_2_IRQHandler</a> from system_init.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[59]">ADC3_4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[24]">BusFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3f]">CAN1_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[40]">CAN1_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6a]">CAN2_RX0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6b]">CAN2_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6c]">CAN2_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[69]">CAN2_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[7e]">COMP7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[7c]">COMP_1_2_3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[7d]">COMP_4_5_6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[20e]">ConsumerHeartbeatAlarm</a> from lifegrd.o(.text) referenced 2 times from lifegrd.o(.text)
 <LI><a href="#[35]">DMA1_Channel1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[36]">DMA1_Channel2_IRQHandler</a> from uart_interface.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[37]">DMA1_Channel3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[38]">DMA1_Channel4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[39]">DMA1_Channel5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[76]">DMA1_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[62]">DMA2_Channel1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[63]">DMA2_Channel2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[64]">DMA2_Channel3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[65]">DMA2_Channel4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[66]">DMA2_Channel5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6e]">DMA2_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6f]">DMA2_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[77]">DMA2_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[78]">DVP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[27]">DebugMon_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1d]">Ds402_Slave_scanIndexOD</a> from ds402_slave.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[12]">Ds402_Slave_valueRangeTest</a> from ds402_slave.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[67]">ETH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[68]">ETH_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[30]">EXTI0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[52]">EXTI15_10_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[31]">EXTI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[32]">EXTI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[33]">EXTI3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[34]">EXTI4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[41]">EXTI9_5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2e]">FLASH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[211]">GuardTimeAlarm</a> from lifegrd.o(.text) referenced from lifegrd.o(.text)
 <LI><a href="#[22]">HardFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4a]">I2C1_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[49]">I2C1_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4c]">I2C2_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4b]">I2C2_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[71]">I2C3_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[70]">I2C3_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[73]">I2C4_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[72]">I2C4_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[7a]">MMU_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[23]">MemManage_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[21]">NMI_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[8c]">OnCOB_ID_SyncUpdate</a> from sync.o(.text) referenced from sync.o(.text)
 <LI><a href="#[215]">OnHeartbeatProducerUpdate</a> from lifegrd.o(.text) referenced from lifegrd.o(.text)
 <LI><a href="#[89]">OnNodeGuardUpdate</a> from lifegrd.o(.text) referenced from lifegrd.o(.text)
 <LI><a href="#[205]">OnNumberOfErrorsUpdate</a> from emcy.o(.text) referenced from emcy.o(.text)
 <LI><a href="#[8a]">PDOEventTimerAlarm</a> from pdo.o(.text) referenced from pdo.o(.text)
 <LI><a href="#[227]">PDOInhibitTimerAlarm</a> from pdo.o(.text) referenced from pdo.o(.text)
 <LI><a href="#[2b]">PVD_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[28]">PendSV_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5]">Pidholding_calc</a> from pidholding.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[210]">ProducerHeartbeatAlarm</a> from lifegrd.o(.text) referenced 2 times from lifegrd.o(.text)
 <LI><a href="#[6d]">QSPI_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2f]">RCC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[7f]">RSRAM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[53]">RTCAlarm_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2d]">RTC_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[20]">Reset_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[79]">SAC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5b]">SDIO_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[8b]">SDOTimeoutAlarm</a> from sdo.o(.text) referenced 9 times from sdo.o(.text)
 <LI><a href="#[4d]">SPI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4e]">SPI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5d]">SPI3_IRQHandler</a> from spi.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[26]">SVC_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[255]">SyncAlarm</a> from sync.o(.text) referenced from sync.o(.text)
 <LI><a href="#[29]">SysTick_Handler</a> from system_init.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[81]">SystemInit</a> from system_n32g45x.o(.text) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[2c]">TAMPER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[42]">TIM1_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[45]">TIM1_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[44]">TIM1_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[43]">TIM1_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[46]">TIM2_IRQHandler</a> from systemclock.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[47]">TIM3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[48]">TIM4_IRQHandler</a> from systemclock.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5c]">TIM5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[60]">TIM6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[61]">TIM7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[55]">TIM8_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[58]">TIM8_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[57]">TIM8_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[56]">TIM8_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[22c]">TPDO_Communication_Parameter_Callback</a> from pdo.o(.text) referenced from pdo.o(.text)
 <LI><a href="#[7b]">TSC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5e]">UART4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5f]">UART5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[74]">UART6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[75]">UART7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4f]">USART1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[50]">USART2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[51]">USART3_IRQHandler</a> from uart_interface.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[54]">USBWakeUp_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3e]">USB_LP_CAN1_RX0_IRQHandler</a> from canopen_interface.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[25]">UsageFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2a]">WWDG_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5a]">XFMC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[11]">_RxPDO_EventTimers_Handler</a> from pdo.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[82]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[17]">_heartbeatError</a> from lifegrd.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[13]">_initialisation</a> from states.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[18]">_nodeguardError</a> from lifegrd.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[15]">_operational</a> from states.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[1b]">_post_SlaveBootup</a> from lifegrd.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[1c]">_post_SlaveStateChange</a> from lifegrd.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[1a]">_post_TPDO</a> from sync.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[1f]">_post_emcy</a> from emcy.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[19]">_post_sync</a> from sync.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[14]">_preOperational</a> from states.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[16]">_stopped</a> from states.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[1e]">_storeODSubIndex</a> from objacces.o(.text) referenced 2 times from ds402_slave.o(.data)
 <LI><a href="#[d]">eMBFuncReadCoils</a> from mbfunccoils.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[10]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[9]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[8]">eMBFuncReadInputRegister</a> from mbfuncinput.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[c]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[7]">eMBFuncReportSlaveID</a> from mbfuncother.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[e]">eMBFuncWriteCoil</a> from mbfunccoils.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[b]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[f]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[a]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(.text) referenced 2 times from mb.o(.data)
 <LI><a href="#[85]">eMBRTUReceive</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[83]">eMBRTUStart</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[84]">eMBRTUStop</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[80]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3]">pidIqs_calc</a> from pidiqs.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[4]">pidc_calc</a> from pidc.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[0]">pidids_calc</a> from pidids.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[6]">pidposition_calc</a> from pidposition.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[2]">pidspeed_calc</a> from pidspeed.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[1]">pidtorque_calc</a> from pidtorque.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[86]">xMBRTUReceiveFSM</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[88]">xMBRTUTimerT35Expired</a> from mbrtu.o(.text) referenced from mb.o(.text)
 <LI><a href="#[87]">xMBRTUTransmitFSM</a> from mbrtu.o(.text) referenced from mb.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[82]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(.text)
</UL>
<P><STRONG><a name="[27c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[273]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[27e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[27f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[280]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[281]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; CANopen_Init &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysErrManage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAnalyse
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllVar
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllRsetVar
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVar
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManage
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Task
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LostCoder
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402Mode_Runing
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Task
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[20]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ADC3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>COMP_1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>COMP_4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>RSRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>XFMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SystemInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, system_n32g45x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(.text)
</UL>
<P><STRONG><a name="[282]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_n32g45x.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>EnternExMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnternExMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[8f]"></a>System_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, system_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = System_Init &rArr; Modbus_USART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnternExMode
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SysTick_Handler &rArr; MotorControl &rArr; SpeedPlant_positionControl &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeing
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, system_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ADC1_2_IRQHandler &rArr; CurrentLoopISR &rArr; SvpwmControl &rArr; Moving_Average_Window_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetIntStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInjectedConversionDat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>

<P><STRONG><a name="[a3]"></a>SystemClk_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, systemclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemClk_Init &rArr; GPIO_ConfigPinRemap
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHse
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcHclk
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinRemap
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_iCacheCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a5]"></a>Gpio_Init</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, systemclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Gpio_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a4]"></a>system_tick_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, systemclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a9]"></a>SPI_Timer_Init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, systemclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI_Timer_Init &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPrescaler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[48]"></a>TIM4_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, systemclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; MT6835_Read_Reg &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Read_Reg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>Timer_Init</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, systemclock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPrescaler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>

<P><STRONG><a name="[46]"></a>TIM2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, systemclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>Adc_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adc_Init &rArr; ADC_ConfigInjectedChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InitStruct
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatusNew
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableExternalTrigInjectedConv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigInt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigInjectedSequencerLength
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigInjectedChannel
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[e3]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Read_Reg
</UL>

<P><STRONG><a name="[d5]"></a>MT6835_Read_Reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MT6835_Read_Reg &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
</UL>

<P><STRONG><a name="[5d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI3_IRQHandler &rArr; MT6835_Read_Reg &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Read_Reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>Delay_Us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
</UL>

<P><STRONG><a name="[a8]"></a>MT6835_Init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MT6835_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[92]"></a>delay_Ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Pwm_Init</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, pwm_step.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Pwm_Init &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOcStruct
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc3
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableCtrlPwmOutputs
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc4Preload
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc3Preload
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc2Preload
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc1Preload
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigBkdt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[f8]"></a>PwmShut</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pwm_step.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmShut
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvpwmControl
</UL>

<P><STRONG><a name="[f9]"></a>PwmOpen</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pwm_step.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvpwmControl
</UL>

<P><STRONG><a name="[dd]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[d1]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[283]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>ADC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, n32g45x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[d9]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g45x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[d8]"></a>ADC_InitStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[de]"></a>ADC_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[286]"></a>ADC_EnableDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>ADC_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[e0]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[e1]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[287]"></a>ADC_EnableSoftwareStartConv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>ADC_ConfigDiscModeChannelCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>ADC_EnableDiscMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>ADC_ConfigRegularChannel</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>ADC_EnableExternalTrigConv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>ADC_GetDat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>ADC_GetDualModeConversionDat</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>ADC_EnableAutoInjectedConv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>ADC_EnableInjectedDiscMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>ADC_ConfigExternalTrigInjectedConv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>ADC_EnableExternalTrigInjectedConv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[292]"></a>ADC_EnableSoftwareStartInjectedConv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>ADC_ConfigInjectedChannel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, n32g45x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConfigInjectedChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[da]"></a>ADC_ConfigInjectedSequencerLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[294]"></a>ADC_SetInjectedOffsetDat</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>ADC_GetInjectedConversionDat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, n32g45x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetInjectedConversionDat
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[295]"></a>ADC_ConfigAnalogWatchdogWorkChannelType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>ADC_ConfigAnalogWatchdogThresholds</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>ADC_ConfigAnalogWatchdogSingleChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>ADC_EnableTempSensorVrefint</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>ADC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>ADC_GetIntStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, n32g45x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[29a]"></a>ADC_ClearIntPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>ADC_InitEx</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>ADC_SetDifChsEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>ADC_GetFlagStatusNew</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[29d]"></a>ADC_SetBypassCalibration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>ADC_SetConvResultBitNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>ADC_ConfigClk</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, n32g45x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcHclk
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcPllClk
</UL>

<P><STRONG><a name="[fd]"></a>CAN_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, n32g45x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[25b]"></a>CAN_Init</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, n32g45x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[25c]"></a>CAN1_InitFilter</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, n32g45x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN1_InitFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[29f]"></a>CAN2_InitFilter</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>CAN_InitStruct</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, n32g45x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[2a0]"></a>CAN_DebugFreeze</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>CAN_EnTTComMode</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>CAN_TransmitMessage</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, n32g45x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_TransmitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[267]"></a>CAN_TransmitSTS</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, n32g45x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[2a2]"></a>CAN_CancelTransmitMessage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>CAN_ReceiveMessage</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, n32g45x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_ReceiveMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2a3]"></a>CAN_ReleaseFIFO</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>CAN_PendingMessage</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>CAN_OperatingModeReq</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>CAN_EnterSleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>CAN_WakeUp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>CAN_GetLastErrCode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>CAN_GetReceiveErrCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>CAN_GetLSBTransmitErrCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>CAN_INTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_it
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_it
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[2ab]"></a>CAN_GetFlagSTS</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>CAN_ClearFlag</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>CAN_GetIntStatus</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckINTStatus
</UL>

<P><STRONG><a name="[2ad]"></a>CAN_ClearINTPendingBit</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, n32g45x_can.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>DMA_DeInit</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
</UL>

<P><STRONG><a name="[1f9]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, n32g45x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
</UL>

<P><STRONG><a name="[1f8]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
</UL>

<P><STRONG><a name="[1fc]"></a>DMA_EnableChannel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_ReEnable
</UL>

<P><STRONG><a name="[1fb]"></a>DMA_ConfigInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
</UL>

<P><STRONG><a name="[1fd]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_ReEnable
</UL>

<P><STRONG><a name="[201]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[2ae]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>DMA_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>DMA_GetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>DMA_ClrIntPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>DMA_RequestRemap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
</UL>

<P><STRONG><a name="[be]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[bd]"></a>FLASH_PrefetchBufSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[2b0]"></a>FLASH_iCacheRST</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>FLASH_iCacheCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[2b1]"></a>FLASH_SetSMPSELStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord_SIGLE
</UL>

<P><STRONG><a name="[133]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord_SIGLE
</UL>

<P><STRONG><a name="[102]"></a>FLASH_GetSTS</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, n32g45x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[101]"></a>FLASH_WaitForLastOpt</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, n32g45x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetSTS
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnWriteProtection
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOBData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
</UL>

<P><STRONG><a name="[104]"></a>FLASH_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnWriteProtection
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOBData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord_SIGLE
</UL>

<P><STRONG><a name="[103]"></a>FLASH_EraseOnePage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, n32g45x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
</UL>

<P><STRONG><a name="[105]"></a>FLASH_MassErase</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[108]"></a>FLASH_GetReadOutProtectionSTS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
</UL>

<P><STRONG><a name="[107]"></a>FLASH_GetReadOutProtectionL2STS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnWriteProtection
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOBData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
</UL>

<P><STRONG><a name="[106]"></a>FLASH_EraseOB</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionSTS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[109]"></a>FLASH_ProgramWord</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, n32g45x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord_SIGLE
</UL>

<P><STRONG><a name="[10a]"></a>FLASH_ProgramOBData</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[10b]"></a>FLASH_EnWriteProtection</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[10c]"></a>FLASH_ReadOutProtectionL1</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[10d]"></a>FLASH_ReadOutProtectionL2_ENABLE</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionSTS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[10e]"></a>FLASH_ConfigUserOB</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, n32g45x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionSTS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[2b2]"></a>FLASH_GetUserOB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>FLASH_GetWriteProtectionOB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>FLASH_GetPrefetchBufSTS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>FLASH_GetSMPSELStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>FLASH_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>FLASH_GetFlagSTS</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32g45x_flash.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, n32g45x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>

<P><STRONG><a name="[111]"></a>GPIO_AFIOInitDefault</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32g45x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, n32g45x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_InitStruct</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[2b8]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Task
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOpen
</UL>

<P><STRONG><a name="[2bc]"></a>GPIO_SetBitsHigh16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmShut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
</UL>

<P><STRONG><a name="[2bd]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>GPIO_ConfigPinLock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>GPIO_ConfigEventOutput</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>GPIO_CtrlEventOutput</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>GPIO_ConfigPinRemap</STRONG> (Thumb, 276 bytes, Stack size 20 bytes, n32g45x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_ConfigPinRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[2c1]"></a>GPIO_ConfigEXTILine</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>GPIO_ETH_ConfigMediaInterface</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>RCC_DeInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[b7]"></a>RCC_ConfigHse</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[c1]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[b8]"></a>RCC_WaitHseStable</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitHseStable
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[2c3]"></a>RCC_SetHsiCalibValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>RCC_EnableHsi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>RCC_ConfigPll</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigPll
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[c0]"></a>RCC_EnablePll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[c2]"></a>RCC_ConfigSysclk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[c3]"></a>RCC_GetSysclkSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[b9]"></a>RCC_ConfigHclk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[bb]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[ba]"></a>RCC_ConfigPclk2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
</UL>

<P><STRONG><a name="[2c5]"></a>RCC_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>RCC_ConfigUsbClk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>RCC_ConfigTim18Clk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>RCC_ConfigRngcClk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>RCC_ConfigEthClk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>RCC_ConfigAdc1mClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>RCC_ConfigAdcPllClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[c7]"></a>RCC_ConfigAdcHclk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[2cb]"></a>RCC_ConfigTrng1mClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>RCC_EnableTrng1mClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>RCC_ConfigLse</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>RCC_EnableLsi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>RCC_ConfigRtcClk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>RCC_EnableRtcClk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[c6]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_Init
</UL>

<P><STRONG><a name="[c4]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[a2]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClk_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnternExMode
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[fa]"></a>RCC_EnableAHBPeriphReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[110]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIOInitDefault
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[fe]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[2d1]"></a>RCC_EnableBORReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>RCC_EnableBackupReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>RCC_EnableClockSecuritySystem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>RCC_ConfigMcoPllClk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>RCC_ConfigMco</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>RCC_ClrFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>RCC_GetIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>RCC_ClrIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, n32g45x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>

<P><STRONG><a name="[e8]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, n32g45x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Init
</UL>

<P><STRONG><a name="[113]"></a>I2S_Init</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, n32g45x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>

<P><STRONG><a name="[2d9]"></a>SPI_InitStruct</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>I2S_InitStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>SPI_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Init
</UL>

<P><STRONG><a name="[2db]"></a>I2S_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>SPI_I2S_EnableInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Init
</UL>

<P><STRONG><a name="[2dc]"></a>SPI_I2S_EnableDma</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>SPI_I2S_TransmitData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[e7]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
</UL>

<P><STRONG><a name="[2dd]"></a>SPI_SetNssLevel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>SPI_SSOutputEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>SPI_ConfigDataLen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>SPI_TransmitCrcNext</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>SPI_EnableCalculateCrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>SPI_GetCRCDat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>SPI_GetCRCPoly</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>SPI_ConfigBidirectionalMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>SPI_I2S_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[2e5]"></a>SPI_I2S_ClrCRCErrFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>SPI_I2S_GetIntStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, n32g45x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_I2S_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
</UL>

<P><STRONG><a name="[2e6]"></a>SPI_I2S_ClrITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_spi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>TIM_DeInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, n32g45x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[cf]"></a>TIM_InitTimeBase</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, n32g45x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[ed]"></a>TIM_InitOc1</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, n32g45x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_InitOc1
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[ef]"></a>TIM_InitOc2</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, n32g45x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_InitOc2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[ee]"></a>TIM_InitOc3</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, n32g45x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_InitOc3
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[f0]"></a>TIM_InitOc4</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, n32g45x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_InitOc4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[2e7]"></a>TIM_InitOc5</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>TIM_InitOc6</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>TIM_SetInCap4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[11a]"></a>TIM_SetInCap3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[119]"></a>TIM_SetInCap2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[117]"></a>TIM_SetInCap1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[115]"></a>TIM_ICInit</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap1Prescaler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap2Prescaler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap3Prescaler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap4Prescaler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI2
</UL>

<P><STRONG><a name="[11c]"></a>TIM_ConfigPwmIc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap1Prescaler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap2Prescaler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI2
</UL>

<P><STRONG><a name="[f6]"></a>TIM_ConfigBkdt</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, n32g45x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ConfigBkdt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[ce]"></a>TIM_InitTimBaseStruct</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[ec]"></a>TIM_InitOcStruct</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[2e9]"></a>TIM_InitIcStruct</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>TIM_InitBkdtStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>TIM_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>

<P><STRONG><a name="[f7]"></a>TIM_EnableCtrlPwmOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[d2]"></a>TIM_ConfigInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_it
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_it
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[2eb]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>TIM_ConfigDma</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>TIM_EnableDma</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>TIM_ConfigInternalClk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>TIM_SelectInputTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrigAsClk
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInternalTrigToExt
</UL>

<P><STRONG><a name="[11d]"></a>TIM_ConfigInternalTrigToExt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrig
</UL>

<P><STRONG><a name="[11f]"></a>TIM_ConfigExtTrigAsClk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI2
</UL>

<P><STRONG><a name="[121]"></a>TIM_ConfigExtTrig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtClkMode2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtClkMode1
</UL>

<P><STRONG><a name="[120]"></a>TIM_ConfigExtClkMode1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrig
</UL>

<P><STRONG><a name="[122]"></a>TIM_ConfigExtClkMode2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrig
</UL>

<P><STRONG><a name="[d0]"></a>TIM_ConfigPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Init
</UL>

<P><STRONG><a name="[2ef]"></a>TIM_ConfigCntMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>TIM_ConfigEncoderInterface</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>TIM_ConfigForcedOc1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>TIM_ConfigForcedOc2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>TIM_ConfigForcedOc3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>TIM_ConfigForcedOc4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>TIM_ConfigForcedOc5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>TIM_ConfigForcedOc6</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>TIM_ConfigArPreload</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>TIM_SelectComEvt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>TIM_SelectCapCmpDmaSrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>TIM_EnableCapCmpPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>TIM_ConfigOc1Preload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[f3]"></a>TIM_ConfigOc2Preload</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[f4]"></a>TIM_ConfigOc3Preload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[f5]"></a>TIM_ConfigOc4Preload</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[2fb]"></a>TIM_ConfigOc5Preload</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>TIM_ConfigOc6Preload</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>TIM_ConfigOc1Fast</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>TIM_ConfigOc2Fast</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>TIM_ConfigOc3Fast</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>TIM_ConfigOc4Fast</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>TIM_ConfigOc5Fast</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>TIM_ConfigOc6Fast</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>TIM_ClrOc1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>TIM_ClrOc2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>TIM_ClrOc3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>TIM_ClrOc4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>TIM_ClrOc5Ref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>TIM_ClrOc6Ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>TIM_ConfigOc1Polarity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>TIM_ConfigOc1NPolarity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>TIM_ConfigOc2Polarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>TIM_ConfigOc2NPolarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>TIM_ConfigOc3Polarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>TIM_ConfigOc3NPolarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>TIM_ConfigOc4Polarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>TIM_ConfigOc5Polarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>TIM_ConfigOc6Polarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>TIM_EnableCapCmpCh</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>TIM_EnableCapCmpChN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>TIM_SelectOcMode</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>TIM_EnableUpdateEvt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>TIM_ConfigUpdateRequestIntSrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>TIM_SelectOutputTrig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>

<P><STRONG><a name="[319]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>TIM_SetCnt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>

<P><STRONG><a name="[31b]"></a>TIM_SetAutoReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>TIM_SetCmp1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>TIM_SetCmp2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>TIM_SetCmp3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>TIM_SetCmp4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>TIM_SetCmp5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>TIM_SetCmp6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>TIM_SetClkDiv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>TIM_GetCap1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>TIM_GetCap2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>TIM_GetCap3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>TIM_GetCap4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>TIM_GetCap5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>TIM_GetCap6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>TIM_GetCnt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>

<P><STRONG><a name="[329]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>TIM_GetAutoReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>TIM_GetCCENStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler1
</UL>

<P><STRONG><a name="[32c]"></a>TIM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_tim.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>TIM_GetIntStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler1
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[123]"></a>USART_DeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, n32g45x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
</UL>

<P><STRONG><a name="[124]"></a>USART_Init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, n32g45x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
</UL>

<P><STRONG><a name="[32d]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>USART_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
</UL>

<P><STRONG><a name="[1f6]"></a>USART_ConfigInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, n32g45x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
</UL>

<P><STRONG><a name="[1f4]"></a>USART_EnableDMA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_USART_Init
</UL>

<P><STRONG><a name="[330]"></a>USART_SetAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>USART_ConfigWakeUpMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>USART_EnableRcvWakeUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>USART_ConfigLINBreakDetectLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>USART_EnableLIN</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>USART_EnableSmartCard</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>USART_SetSmartCardNACK</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>USART_EnableHalfDuplex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>USART_ConfigIrDAMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>USART_EnableIrDA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>USART_ClrFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>USART_GetIntStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, n32g45x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[341]"></a>USART_ClrIntPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_usart.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>ImeasCheck</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, function.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>LostPhase</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, function.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>LostCoder</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[344]"></a>TorsionAnalyse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, function.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>SpeedAnalyse</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>ReadVar</STRONG> (Thumb, 882 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadVar &rArr; MyFLASH_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>SaveAllRsetVar</STRONG> (Thumb, 1438 bytes, Stack size 48 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SaveAllRsetVar &rArr; MyFLASH_WriteWord &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>SaveAllVar</STRONG> (Thumb, 1344 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SaveAllVar &rArr; MyFLASH_WriteWord &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>PowerManage</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerManage
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>SysErrManage</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Led</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Led
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>SvpwmControl</STRONG> (Thumb, 740 bytes, Stack size 40 bytes, svpwmisr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SvpwmControl &rArr; Moving_Average_Window_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOpen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmShut
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average_Window_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
</UL>

<P><STRONG><a name="[12b]"></a>PID_IdIq</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, svpwmisr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PID_IdIq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
</UL>

<P><STRONG><a name="[b2]"></a>CurrentLoopISR</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, svpwmisr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CurrentLoopISR &rArr; SvpwmControl &rArr; Moving_Average_Window_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average_Window_Filter_4096
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average_Window_Filter
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_IdIq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvpwmControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>MotorControl</STRONG> (Thumb, 822 bytes, Stack size 40 bytes, svpwmisr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MotorControl &rArr; SpeedPlant_positionControl &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ad]"></a>SpeedCalculate</STRONG> (Thumb, 478 bytes, Stack size 20 bytes, svpwmisr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpeedCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ac]"></a>Timeing</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9c]"></a>CiA402Mode_Runing</STRONG> (Thumb, 732 bytes, Stack size 40 bytes, cia402.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CiA402Mode_Runing &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>UartMode_Runing</STRONG> (Thumb, 2202 bytes, Stack size 48 bytes, uartmode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UartMode_Runing &rArr; Set_SpeedPlant_Para &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6835_Read_Reg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Us
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFLASH_WriteWord
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_total_time
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>MyFLASH_WriteWord</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, flash_wr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MyFLASH_WriteWord &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllVar
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllRsetVar
</UL>

<P><STRONG><a name="[134]"></a>MyFLASH_WriteWord_SIGLE</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, flash_wr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>

<P><STRONG><a name="[125]"></a>MyFLASH_ReadByte</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, flash_wr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MyFLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVar
</UL>

<P><STRONG><a name="[128]"></a>Moving_Average_Window_Filter</STRONG> (Thumb, 128 bytes, Stack size 44 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Moving_Average_Window_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvpwmControl
</UL>

<P><STRONG><a name="[129]"></a>Moving_Average_Window_Filter_4096</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Moving_Average_Window_Filter_4096
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
</UL>

<P><STRONG><a name="[345]"></a>Ids_filter1</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>Ids_filter2</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>Ids_filter3</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>Ids_filter4</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>Ids_filter5</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>Ids_filter6</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>Ids_filter7</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>Ids_filter8</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>Ids_filter9</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>FindTable2</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, pidspeed.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>FindTable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pidspeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindTable
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidtorque_calc
</UL>

<P><STRONG><a name="[2]"></a>pidspeed_calc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pidspeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pidspeed_calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>pidIqs_calc</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, pidiqs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pidIqs_calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>pidtorque_calc</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, pidtorque.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pidtorque_calc &rArr; FindTable
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>pidids_calc</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, pidids.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>pidposition_calc</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, pidposition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pidposition_calc &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Pidholding_calc</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, pidholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pidholding_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[130]"></a>Set_SpeedPlant_Para</STRONG> (Thumb, 1576 bytes, Stack size 64 bytes, speedplan2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Set_SpeedPlant_Para &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
</UL>

<P><STRONG><a name="[12e]"></a>SpeedPlant_positionControl</STRONG> (Thumb, 980 bytes, Stack size 72 bytes, speedplan2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SpeedPlant_positionControl &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
</UL>

<P><STRONG><a name="[131]"></a>get_total_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speedplan2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMode_Runing
</UL>

<P><STRONG><a name="[141]"></a>sp_cal_multi</STRONG> (Thumb, 1004 bytes, Stack size 32 bytes, speedplan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[142]"></a>SpeedPlant_positionControl_multi</STRONG> (Thumb, 2352 bytes, Stack size 88 bytes, speedplan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[34f]"></a>get_total_time_multi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, speedplan2.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>clarke</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, svpwm_steper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15sinPU
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15mpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15cosPU
</UL>

<P><STRONG><a name="[12a]"></a>park</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, svpwm_steper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = park &rArr; _IQ15sinPU &rArr; __IQNsin_cos &rArr; __IQNcalcCos
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15sinPU
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15mpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15cosPU
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
</UL>

<P><STRONG><a name="[12c]"></a>ipark</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, svpwm_steper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ipark &rArr; _IQ15sinPU &rArr; __IQNsin_cos &rArr; __IQNcalcCos
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15sinPU
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15mpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15cosPU
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ12mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
</UL>

<P><STRONG><a name="[148]"></a>svgendq</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, svpwm_steper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15mpy
</UL>

<P><STRONG><a name="[350]"></a>svgendq2</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, svpwm_steper.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>PWM</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, svpwm_steper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopISR
</UL>

<P><STRONG><a name="[4]"></a>pidc_calc</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, pidc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pidc_calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>_IQ31mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[14b]"></a>_IQ30mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[14c]"></a>_IQ29mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[14d]"></a>_IQ28mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[14e]"></a>_IQ27mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[14f]"></a>_IQ26mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[150]"></a>_IQ25mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[151]"></a>_IQ24mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[152]"></a>_IQ23mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[153]"></a>_IQ22mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[154]"></a>_IQ21mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[155]"></a>_IQ20mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[156]"></a>_IQ19mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[157]"></a>_IQ18mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[158]"></a>_IQ17mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[159]"></a>_IQ16mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[146]"></a>_IQ15mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _IQ15mpy &rArr; __IQNmpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svgendq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clarke
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark
</UL>

<P><STRONG><a name="[15a]"></a>_IQ14mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[15b]"></a>_IQ13mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[147]"></a>_IQ12mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _IQ12mpy &rArr; __IQNmpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark
</UL>

<P><STRONG><a name="[15c]"></a>_IQ11mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[15d]"></a>_IQ10mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[15e]"></a>_IQ9mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[15f]"></a>_IQ8mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[160]"></a>_IQ7mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[161]"></a>_IQ6mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[162]"></a>_IQ5mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[163]"></a>_IQ4mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[164]"></a>_IQ3mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[165]"></a>_IQ2mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[351]"></a>_IQ1mpy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _iqnmpy.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>_IQ29sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[16b]"></a>_IQ28sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[16c]"></a>_IQ27sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[16d]"></a>_IQ26sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[16e]"></a>_IQ25sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[16f]"></a>_IQ24sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[170]"></a>_IQ23sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[171]"></a>_IQ22sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[172]"></a>_IQ21sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[173]"></a>_IQ20sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[174]"></a>_IQ19sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[175]"></a>_IQ18sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[176]"></a>_IQ17sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[177]"></a>_IQ16sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[178]"></a>_IQ15sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[179]"></a>_IQ14sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[17a]"></a>_IQ13sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[17b]"></a>_IQ12sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[17c]"></a>_IQ11sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[17d]"></a>_IQ10sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[17e]"></a>_IQ9sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[17f]"></a>_IQ8sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[180]"></a>_IQ7sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[181]"></a>_IQ6sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[182]"></a>_IQ5sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[183]"></a>_IQ4sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[184]"></a>_IQ3sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[185]"></a>_IQ2sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[186]"></a>_IQ1sin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[187]"></a>_IQ29cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[188]"></a>_IQ28cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[189]"></a>_IQ27cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[18a]"></a>_IQ26cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[18b]"></a>_IQ25cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[18c]"></a>_IQ24cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[18d]"></a>_IQ23cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[18e]"></a>_IQ22cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[18f]"></a>_IQ21cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[190]"></a>_IQ20cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[191]"></a>_IQ19cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[192]"></a>_IQ18cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[193]"></a>_IQ17cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[194]"></a>_IQ16cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[195]"></a>_IQ15cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[196]"></a>_IQ14cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[197]"></a>_IQ13cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[198]"></a>_IQ12cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[199]"></a>_IQ11cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[19a]"></a>_IQ10cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[19b]"></a>_IQ9cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[19c]"></a>_IQ8cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[19d]"></a>_IQ7cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[19e]"></a>_IQ6cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[19f]"></a>_IQ5cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a0]"></a>_IQ4cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a1]"></a>_IQ3cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a2]"></a>_IQ2cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a3]"></a>_IQ1cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a4]"></a>_IQ31sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a5]"></a>_IQ30sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a6]"></a>_IQ29sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a7]"></a>_IQ28sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a8]"></a>_IQ27sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1a9]"></a>_IQ26sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1aa]"></a>_IQ25sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1ab]"></a>_IQ24sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1ac]"></a>_IQ23sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1ad]"></a>_IQ22sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1ae]"></a>_IQ21sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1af]"></a>_IQ20sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b0]"></a>_IQ19sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b1]"></a>_IQ18sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b2]"></a>_IQ17sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b3]"></a>_IQ16sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[144]"></a>_IQ15sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _IQ15sinPU &rArr; __IQNsin_cos &rArr; __IQNcalcCos
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clarke
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark
</UL>

<P><STRONG><a name="[1b4]"></a>_IQ14sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b5]"></a>_IQ13sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b6]"></a>_IQ12sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b7]"></a>_IQ11sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b8]"></a>_IQ10sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1b9]"></a>_IQ9sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1ba]"></a>_IQ8sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1bb]"></a>_IQ7sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1bc]"></a>_IQ6sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1bd]"></a>_IQ5sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1be]"></a>_IQ4sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1bf]"></a>_IQ3sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c0]"></a>_IQ2sinPU</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c1]"></a>_IQ1sinPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c2]"></a>_IQ31cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c3]"></a>_IQ30cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c4]"></a>_IQ29cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c5]"></a>_IQ28cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c6]"></a>_IQ27cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c7]"></a>_IQ26cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c8]"></a>_IQ25cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1c9]"></a>_IQ24cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1ca]"></a>_IQ23cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1cb]"></a>_IQ22cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1cc]"></a>_IQ21cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1cd]"></a>_IQ20cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1ce]"></a>_IQ19cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1cf]"></a>_IQ18cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d0]"></a>_IQ17cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d1]"></a>_IQ16cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[145]"></a>_IQ15cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _IQ15cosPU &rArr; __IQNsin_cos &rArr; __IQNcalcCos
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clarke
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark
</UL>

<P><STRONG><a name="[1d2]"></a>_IQ14cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d3]"></a>_IQ13cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d4]"></a>_IQ12cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d5]"></a>_IQ11cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d6]"></a>_IQ10cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d7]"></a>_IQ9cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d8]"></a>_IQ8cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1d9]"></a>_IQ7cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1da]"></a>_IQ6cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1db]"></a>_IQ5cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1dc]"></a>_IQ4cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1dd]"></a>_IQ3cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1de]"></a>_IQ2cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[1df]"></a>_IQ1cosPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[d]"></a>eMBFuncReadCoils</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mbfunccoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBFuncReadCoils
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbfunccoils.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mbfunccoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBFuncWriteMultipleCoils
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mbfuncdisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBFuncReadDiscreteInputs
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mbfuncholding.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBFuncReadHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mbfuncholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mbfuncinput.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBFuncReadInputRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e1]"></a>eMBSetSlaveID</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mbfuncother.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[7]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mbfuncother.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[352]"></a>xMBUtilSetBits</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbutils.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>xMBUtilGetBits</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbutils.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>prveMBError2Exception</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mbutils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[1e4]"></a>usMBCRC16</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mbcrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exception_RSP
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[83]"></a>eMBRTUStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mbrtu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBRTUStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>eMBRTUReceive</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUReceiveFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUTransmitFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mbrtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUTimerT35Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text)
</UL>
<P><STRONG><a name="[354]"></a>FillBuf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>MB_JudgeNum</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_JudgeNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Analyze_Execute
</UL>

<P><STRONG><a name="[1e9]"></a>MB_JudgeAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Analyze_Execute
</UL>

<P><STRONG><a name="[1e7]"></a>MB_Analyze_Execute</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MB_Analyze_Execute &rArr; MB_JudgeNum
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_JudgeAddr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_JudgeNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1ef]"></a>isWritableAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP
</UL>

<P><STRONG><a name="[1ea]"></a>MB_Exception_RSP</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MB_Exception_RSP &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1eb]"></a>MB_RSP</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MB_RSP &rArr; MB_RSP_04H
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isWritableAddr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP_05H
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP_04H
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP_01H
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[93]"></a>eMBInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[355]"></a>eMBRegisterCB</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>eMBClose</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>eMBEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[357]"></a>eMBDisable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>eMBPoll</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = eMBPoll &rArr; MB_RSP &rArr; MB_RSP_04H
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_ReEnable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exception_RSP
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Analyze_Execute
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Task
</UL>

<P><STRONG><a name="[203]"></a>getPDUData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Respond
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Modbus_RO_Data
</UL>

<P><STRONG><a name="[1f0]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1e5]"></a>xMBPortEventPost</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[1f2]"></a>xMBPortEventGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, portevent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1e3]"></a>vMBPortSerialEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, portserial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[358]"></a>xMBPortSerialInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, portserial.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, portserial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[ab]"></a>Modbus_USART_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Modbus_USART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableDMA
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[aa]"></a>Modbus_DMA_Init</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Modbus_DMA_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigInt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1f3]"></a>Modbus_DMA_ReEnable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modbus_DMA_ReEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Task
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[36]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; Modbus_DMA_ReEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClrIntPendingBit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetIntStatus
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_ReEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART3_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_ReEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[202]"></a>Update_Modbus_RO_Data</STRONG> (Thumb, 2078 bytes, Stack size 56 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Update_Modbus_RO_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPDUData
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Task
</UL>

<P><STRONG><a name="[204]"></a>Modbus_Respond</STRONG> (Thumb, 2246 bytes, Stack size 40 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Modbus_Respond
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPDUData
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Task
</UL>

<P><STRONG><a name="[96]"></a>Modbus_Task</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Modbus_Task &rArr; eMBPoll &rArr; MB_RSP &rArr; MB_RSP_04H
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Respond
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Modbus_RO_Data
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_DMA_ReEnable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[205]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, emcy.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emcy.o(.text)
</UL>
<P><STRONG><a name="[206]"></a>emergencyInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, emcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emergencyInit &rArr; RegisterSetODentryCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[252]"></a>emergencyStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[208]"></a>sendEMCY</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, emcy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_errorRecovered
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_setError
</UL>

<P><STRONG><a name="[20a]"></a>EMCY_setError</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, emcy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEMCY
</UL>

<P><STRONG><a name="[20b]"></a>EMCY_errorRecovered</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, emcy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEMCY
</UL>

<P><STRONG><a name="[24d]"></a>proceedEMCY</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, emcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[1f]"></a>_post_emcy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[359]"></a>getNodeState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lifegrd.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>ConsumerHeartbeatAlarm</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConsumerHeartbeatAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[20c]"></a>proceedNODE_GUARD</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = proceedNODE_GUARD &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[210]"></a>ProducerHeartbeatAlarm</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ProducerHeartbeatAlarm &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[211]"></a>GuardTimeAlarm</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GuardTimeAlarm &rArr; masterSendNMTnodeguard &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[213]"></a>nodeguardInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nodeguardInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[214]"></a>nodeguardStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nodeguardStop
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[89]"></a>OnNodeGuardUpdate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OnNodeGuardUpdate &rArr; nodeguardInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text)
</UL>
<P><STRONG><a name="[216]"></a>heartbeatInit</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = heartbeatInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
</UL>

<P><STRONG><a name="[217]"></a>heartbeatStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
</UL>

<P><STRONG><a name="[218]"></a>lifeGuardInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lifeGuardInit &rArr; heartbeatInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[219]"></a>lifeGuardStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lifegrd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lifeGuardStop &rArr; heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[17]"></a>_heartbeatError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>_post_SlaveBootup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>_post_SlaveStateChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_nodeguardError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[21a]"></a>masterSendNMTstateChange</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nmtmaster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = masterSendNMTstateChange &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preOperational
</UL>

<P><STRONG><a name="[212]"></a>masterSendNMTnodeguard</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nmtmaster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = masterSendNMTnodeguard &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterRequestNodeState
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
</UL>

<P><STRONG><a name="[21b]"></a>masterRequestNodeState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nmtmaster.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
</UL>

<P><STRONG><a name="[21c]"></a>proceedNMTstateChange</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, nmtslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[220]"></a>slaveSendBootUp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nmtslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = slaveSendBootUp &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[35a]"></a>accessDictionaryError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, objacces.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>_getODentry</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, objacces.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[222]"></a>_setODentry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, objacces.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[207]"></a>RegisterSetODentryCallBack</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, objacces.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>

<P><STRONG><a name="[1e]"></a>_storeODSubIndex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, objacces.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[224]"></a>CopyBits</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[223]"></a>buildPDO</STRONG> (Thumb, 220 bytes, Stack size 88 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[225]"></a>sendPDOrequest</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[227]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDOInhibitTimerAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>sendOnePDOevent</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402Mode_Runing
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Task
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>

<P><STRONG><a name="[8a]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text)
</UL>
<P><STRONG><a name="[229]"></a>proceedPDO</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = proceedPDO &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[22a]"></a>_sendPDOevent</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPDOevent
</UL>

<P><STRONG><a name="[22b]"></a>sendPDOevent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[11]"></a>_RxPDO_EventTimers_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pdo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[22c]"></a>TPDO_Communication_Parameter_Callback</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TPDO_Communication_Parameter_Callback &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text)
</UL>
<P><STRONG><a name="[22d]"></a>PDOInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[22e]"></a>PDOStop</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PDOStop
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[35b]"></a>PDOEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pdo.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>PDODisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pdo.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>initSDOline</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[230]"></a>resetSDOline</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetClientSDOLineFromNodeId
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[231]"></a>sendSDO</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sendSDO &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
</UL>

<P><STRONG><a name="[232]"></a>sendSDOabort</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[8b]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDOTimeoutAlarm &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdo.o(.text)
</UL>
<P><STRONG><a name="[233]"></a>resetSDO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = resetSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[234]"></a>SDOlineToObjdict</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[235]"></a>objdictToSDOline</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = objdictToSDOline &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[240]"></a>lineToSDO</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[23c]"></a>SDOtoLine</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDOtoLine
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[237]"></a>getSDOlineOnUse</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetClientSDOLineFromNodeId
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
</UL>

<P><STRONG><a name="[236]"></a>failedSDO</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = failedSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[23d]"></a>getSDOfreeLine</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSDOfreeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[23a]"></a>getSDOlineToClose</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
</UL>

<P><STRONG><a name="[239]"></a>GetSDOClientFromNodeId</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetClientSDOLineFromNodeId
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSDOtransfer
</UL>

<P><STRONG><a name="[238]"></a>closeSDOtransfer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineToClose
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[23f]"></a>getSDOlineRestBytes</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[23e]"></a>setSDOlineRestBytes</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[23b]"></a>proceedSDO</STRONG> (Thumb, 5320 bytes, Stack size 88 bytes, sdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proceedSDO &rArr; failedSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSDOlineRestBytes
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineRestBytes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[241]"></a>resetClientSDOLineFromNodeId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[242]"></a>_writeNetworkDict</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDictCallBackAI
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDictCallBack
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
</UL>

<P><STRONG><a name="[243]"></a>writeNetworkDict</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[244]"></a>writeNetworkDictCallBack</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[245]"></a>writeNetworkDictCallBackAI</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[246]"></a>_readNetworkDict</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDictCallbackAI
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDictCallback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
</UL>

<P><STRONG><a name="[247]"></a>readNetworkDict</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
</UL>

<P><STRONG><a name="[248]"></a>readNetworkDictCallback</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
</UL>

<P><STRONG><a name="[249]"></a>readNetworkDictCallbackAI</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
</UL>

<P><STRONG><a name="[24a]"></a>getReadResultNetworkDict</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[24b]"></a>getWriteResultNetworkDict</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[35d]"></a>getState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, states.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>canDispatch</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[24f]"></a>switchCommunicationState</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[21f]"></a>setState</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[21d]"></a>getNodeId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, states.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[21e]"></a>setNodeId</STRONG> (Thumb, 322 bytes, Stack size 52 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = setNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[13]"></a>_initialisation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>_preOperational</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, states.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _preOperational &rArr; masterSendNMTstateChange &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>_operational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>_stopped</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[24e]"></a>proceedSYNC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[253]"></a>sendSYNCMessage</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sendSYNCMessage &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[254]"></a>sendSYNC</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncAlarm
</UL>

<P><STRONG><a name="[255]"></a>SyncAlarm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SyncAlarm &rArr; sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text)
</UL>
<P><STRONG><a name="[251]"></a>stopSYNC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stopSYNC &rArr; RegisterSetODentryCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[250]"></a>startSYNC</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = startSYNC &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCOB_ID_SyncUpdate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[8c]"></a>OnCOB_ID_SyncUpdate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OnCOB_ID_SyncUpdate &rArr; startSYNC &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[20f]"></a>SetAlarm</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, timer_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[20d]"></a>DelAlarm</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[258]"></a>TimeDispatch</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, timer_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler1
</UL>

<P><STRONG><a name="[259]"></a>canInit</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = canInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_INTConfig
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_InitStruct
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_InitFilter
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canOpen
</UL>

<P><STRONG><a name="[25e]"></a>canOpen</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = canOpen &rArr; canInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Init
</UL>

<P><STRONG><a name="[94]"></a>CANopen_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CANopen_Init &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canOpen
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>CANopen_Task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CANopen_Task &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[260]"></a>initTimer</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, canopen_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCnt
</UL>

<P><STRONG><a name="[257]"></a>setTimer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCnt
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[256]"></a>getElapsedTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[263]"></a>TIM3_IRQHandler1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, canopen_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>

<P><STRONG><a name="[209]"></a>canSend</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitSTS
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitMessage
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPDOrequest
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEMCY
</UL>

<P><STRONG><a name="[35e]"></a>canChangeBaudRate_driver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canopen_interface.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, canopen_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReceiveMessage
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[269]"></a>disable_it</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, canopen_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_INTConfig
</UL>

<P><STRONG><a name="[26a]"></a>enable_it</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canopen_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_INTConfig
</UL>

<P><STRONG><a name="[12]"></a>Ds402_Slave_valueRangeTest</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds402_slave.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Ds402_Slave_scanIndexOD</STRONG> (Thumb, 750 bytes, Stack size 0 bytes, ds402_slave.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ds402_slave.o(.data)
</UL>
<P><STRONG><a name="[35f]"></a>ObScanIndex</STRONG> (Thumb, 720 bytes, Stack size 0 bytes, ds402_slave.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>ObGetDataByType</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ds402_slave.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[361]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[362]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pidholding_calc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNmpy
</UL>

<P><STRONG><a name="[363]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBSetSlaveID
</UL>

<P><STRONG><a name="[364]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[366]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[368]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[25f]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Init
</UL>

<P><STRONG><a name="[226]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl_multi
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl_multi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl_multi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidposition_calc
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidposition_calc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl_multi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidposition_calc
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl_multi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl_multi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl
</UL>

<P><STRONG><a name="[369]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[26f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[36c]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[36d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[13a]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl_multi
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cal_multi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPlant_positionControl
</UL>

<P><STRONG><a name="[370]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[13b]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cal_multi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SpeedPlant_Para
</UL>

<P><STRONG><a name="[27b]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[27a]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[279]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[276]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[278]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[371]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[372]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[373]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[275]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a0]"></a>SetSysClock</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, system_n32g45x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cd]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systemclock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_init
</UL>

<P><STRONG><a name="[100]"></a>CheckINTStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetIntStatus
</UL>

<P><STRONG><a name="[118]"></a>ConfigTI2</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrigAsClk
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[116]"></a>ConfigTI1</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, n32g45x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrigAsClk
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[14a]"></a>__IQNmpy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _iqnmpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __IQNmpy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15mpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ12mpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ2mpy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ3mpy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ4mpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ5mpy
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ6mpy
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ7mpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ8mpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ9mpy
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10mpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ11mpy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ13mpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ14mpy
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ16mpy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ17mpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ18mpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ19mpy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20mpy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ21mpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ22mpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ23mpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24mpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ25mpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ26mpy
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ27mpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ28mpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ29mpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ30mpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ31mpy
</UL>

<P><STRONG><a name="[166]"></a>__IQNcalcSin</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _iqnsin_cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __IQNcalcSin
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mpyf_l
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[168]"></a>__IQNcalcCos</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, _iqnsin_cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __IQNcalcCos
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mpyf_l
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNsin_cos
</UL>

<P><STRONG><a name="[169]"></a>__IQNsin_cos</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, _iqnsin_cos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __IQNsin_cos &rArr; __IQNcalcCos
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNcalcCos
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNcalcSin
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15sinPU
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15cosPU
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ1cosPU
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ2cosPU
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ3cosPU
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ4cosPU
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ5cosPU
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ6cosPU
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ7cosPU
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ8cosPU
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ9cosPU
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10cosPU
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ11cosPU
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ12cosPU
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ13cosPU
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ14cosPU
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ16cosPU
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ17cosPU
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ18cosPU
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ19cosPU
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20cosPU
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ21cosPU
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ22cosPU
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ23cosPU
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24cosPU
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ25cosPU
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ26cosPU
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ27cosPU
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ28cosPU
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ29cosPU
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ30cosPU
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ31cosPU
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ1sinPU
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ2sinPU
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ3sinPU
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ4sinPU
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ5sinPU
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ6sinPU
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ7sinPU
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ8sinPU
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ9sinPU
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10sinPU
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ11sinPU
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ12sinPU
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ13sinPU
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ14sinPU
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ16sinPU
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ17sinPU
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ18sinPU
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ19sinPU
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20sinPU
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ21sinPU
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ22sinPU
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ23sinPU
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24sinPU
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ25sinPU
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ26sinPU
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ27sinPU
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ28sinPU
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ29sinPU
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ30sinPU
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ31sinPU
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ1cos
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ2cos
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ3cos
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ4cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ5cos
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ6cos
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ7cos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ8cos
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ9cos
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10cos
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ11cos
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ12cos
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ13cos
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ14cos
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15cos
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ16cos
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ17cos
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ18cos
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ19cos
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20cos
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ21cos
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ22cos
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ23cos
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24cos
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ25cos
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ26cos
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ27cos
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ28cos
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ29cos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ1sin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ2sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ3sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ4sin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ5sin
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ6sin
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ7sin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ8sin
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ9sin
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ11sin
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ12sin
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ13sin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ14sin
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ15sin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ16sin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ17sin
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ18sin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ19sin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20sin
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ21sin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ22sin
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ23sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24sin
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ25sin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ26sin
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ27sin
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ28sin
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ29sin
</UL>

<P><STRONG><a name="[167]"></a>__mpyf_l</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _iqnsin_cos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNcalcCos
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IQNcalcSin
</UL>

<P><STRONG><a name="[1ec]"></a>MB_RSP_01H</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP
</UL>

<P><STRONG><a name="[1ed]"></a>MB_RSP_04H</STRONG> (Thumb, 88 bytes, Stack size 148 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MB_RSP_04H
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP
</UL>

<P><STRONG><a name="[1ee]"></a>MB_RSP_05H</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_RSP_05H
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RSP
</UL>

<P><STRONG><a name="[228]"></a>sendPdo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pdo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sendPdo &rArr; canSend &rArr; CAN_TransmitMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
